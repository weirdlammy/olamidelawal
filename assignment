*NO 5...
def binary_to_decimal(binary):
    stack = []
    decimal = 0
    power = 0

    # Push each bit of the binary number onto the stack
    for bit in binary:
        stack.append(int(bit))

    # Process the bits from right to left
    while stack:
        bit = stack.pop()
        decimal += bit * (2 ** power)
        power += 1

    return decimal

# Test cases
binary_numbers = ['11000101', '10101010', '11111111', '10000000', '1111100000']
for binary_number in binary_numbers:
    decimal_number = binary_to_decimal(binary_number)
    print(f"Binary: {binary_number} -> Decimal: {decimal_number}")

NO 6...
def decimal_to_binary(decimal):
    stack = []

    # Convert decimal to binary using the division remainder method
    while decimal > 0:
        remainder = decimal % 2
        stack.append(remainder)
        decimal //= 2

    # Pop elements from the stack to form the binary representation
    binary = ''
    while stack:
        binary += str(stack.pop())

    return binary if binary else '0'  # If the input decimal is 0, return '0' as binary

# Test cases
decimal_numbers = [13, 55, 255, 128, 496]
for decimal_number in decimal_numbers:
    binary_number = decimal_to_binary(decimal_number)
    print(f"Decimal: {decimal_number} -> Binary: {binary_number}")


NO 7...
#include <iostream>
#include <stack>
#include <unordered_map>
#include <string>
#include <sstream>

class InfixToPostfix {
private:
    std::string infix;
    std::string postfix;
    std::unordered_map<char, int> precedenceMap;

    bool isOperator(char c) {
        return (c == '+' || c == '-' || c == '*' || c == '/');
    }

    bool hasHigherPrecedence(char op1, char op2) {
        return precedenceMap[op1] >= precedenceMap[op2];
    }

    void convertToPostfix() {
        std::stack<char> operators;
        postfix = "";

        for (char& c : infix) {
            if (c == ' ') {
                continue;
            } else if (isalnum(c)) {
                postfix += c;
            } else if (c == '(') {
                operators.push(c);
            } else if (c == ')') {
                while (!operators.empty() && operators.top() != '(') {
                    postfix += operators.top();
                    operators.pop();
                }
                operators.pop(); // Discard the '('
            } else if (isOperator(c)) {
                while (!operators.empty() && operators.top() != '(' && hasHigherPrecedence(operators.top(), c)) {
                    postfix += operators.top();
                    operators.pop();
                }
                operators.push(c);
            }
        }

        while (!operators.empty()) {
            postfix += operators.top();
            operators.pop();
        }
    }

public:
    InfixToPostfix() {
        precedenceMap['+'] = 1;
        precedenceMap['-'] = 1;
        precedenceMap['*'] = 2;
        precedenceMap['/'] = 2;
    }

    void getInfix(const std::string& expression) {
        infix = expression;
    }

    void showInfix() const {
        std::cout << "Infix Expression: " << infix << std::endl;
    }

    void showPostfix() const {
        std::cout << "Postfix Expression: " << postfix << std::endl;
    }

    void convertAndShowPostfix() {
        convertToPostfix();
        showPostfix();
    }
};

int main() {
    std::vector<std::string> expressions = {
        "A + B - C",
        "(A + B) * C",
        "(A + B) * (C - D)",
        "A + ((B + C) * (E - F) - G) / (H - I)",
        "A + B * (C + D) - E / F * G + H"
    };

    for (const auto& exp : expressions) {
        InfixToPostfix converter;
        converter.getInfix(exp);
        converter.showInfix();
        converter.convertAndShowPostfix();
        std::cout << std::endl;
    }

    return 0;
}
*/
